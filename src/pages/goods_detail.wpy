<style lang="less">
@import '../plugins/wxParse/wxParse.wxss';

.swiper,
.swiper-img {
  width: 750rpx;
  height: 720rpx;
}

.product-info {
  height: 300rpx;
  background-color: #fff;
  padding: 0 16rpx;
}
.product-head {
  height: 38rpx;
  padding: 40rpx 0;
  .price {
    color: #ff2d4a;
    font-size: 50rpx;
    margin-left: -10rpx;
  }
  .old-price {
    color: #999;
    font-size: 26rpx;
  }
}
.product-body {
  display: flex;
  align-items: center;
  justify-content: space-between;
  .product-name {
    font-size: 34rpx;
    width: 546rpx;
    height: 88rpx;
    line-height: 1.3;
    /* 多行文字隐藏省略号 */
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
  }
  .product-like {
    width: 50rpx;
    height: 78rpx;
    border-left: 1rpx solid #ddd;
    padding-left: 46rpx;
    margin-right: 30rpx;
    color: #999;

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
  }
  .icon-shoucang {
    width: 32rpx;
    height: 32rpx;
    margin-top: 10rpx;
  }
}

.product-foot {
  font-size: 30rpx;
  color: #999;
  margin-top: 34rpx;
}

.part {
  background-color: #fff;
  margin: 20rpx 0;
  font-size: 32rpx;
  color: #999;

  &-item {
    display: flex;
    padding: 28rpx 16rpx;
    position: relative;
    align-items: center;
  }

  &-line:after {
    content: '';
    height: 1rpx;
    width: 734rpx;
    background-color: #ddd;
    display: block;
    position: absolute;
    bottom: -1rpx;
  }
  .note {
    color: #333;
    margin-right: 40rpx;
  }
  .description {
    width: 490rpx;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    word-wrap: normal;
  }
  .icon-jiantouyou {
    width: 25rpx;
    height: 25rpx;
    color: #ccc;
    position: absolute;
    right: 46rpx;
    display: flex;
    align-items: center;
    justify-content: center;
  }
}

.tabs-head {
  height: 100rpx;
  background-color: #fff;
  display: flex;
}
.tabs-head .tabs-item {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 30rpx;
  position: relative;
}
.tabs-head .active {
  color: #ff2d4a;
  font-weight: 400;
}
.tabs-head .active:after {
  content: '';
  height: 12rpx;
  width: 100%;
  background-color: #ff2d4a;
  position: absolute;
  left: 0;
  bottom: 0;
}
.tabs-body {
  padding: 16rpx;
  padding-bottom: 250rpx;
}
.param-item {
  padding: 30rpx 0;
  font-size: 28rpx;
  display: flex;
  align-items: center;
}
.param-item .note {
  width: 310rpx;
  color: #999;
}
.param-item .description {
  width: 440rpx;
  line-height: 1.3;
}

.fixed-bar {
  width: 750rpx;
  height: 98rpx;
  background-color: #fff;
  position: fixed;
  bottom: 0;
  z-index: 11;
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.fixed-bar .item {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}
.fixed-bar .item .iconfont {
  width: 40rpx;
  height: 40rpx;
  font-size: 40rpx;
  color: #999;
}

.fixed-bar .item .item-note {
  margin-top: 10rpx;
  font-size: 22rpx;
  color: #666;
}
.fixed-bar .btn-group {
  display: flex;
}
.fixed-bar .btn {
  width: 213rpx;
  height: 98rpx;
  line-height: 98rpx;
  text-align: center;
  font-size: 30rpx;
  color: #fff;
}
.yellow-button {
  background-color: #ffb400;
}
.red-button {
  background-color: #ff2d4a;
}

.wxParse-content {
  padding: 55rpx;

  .wxParse-a {
    display: none;
  }
  .wxParse-div {
    display: flex;
    justify-content: center;
  }
}
// 9.0.2 客服按钮样式，把按钮设置成透明，不遮挡原本内容
// 9.0.3 登录 mp.weixin.qq.com 微信公众平台小程序后台，添加客服人员
// 9.0.4 登录 mpkf.weixin.qq.com 微信公众平台客服系统，回复用户消息
.contact-btn {
  opacity: 0;
  position: absolute;
  width: 100%;
  height: 100%;
}
.fixed-bar .item {
  position: relative;
}
</style>
<template>
  <!-- 轮播图 -->
  <swiper class="swiper"
    indicator-dots="{{ true }}"
    indicator-color="rgba(255,255,255,.5)"
    indicator-active-color="#ffffff"
    interval="2500"
    autoplay="true"
    circular="true">
      <block wx:for="{{ goodsDetail.pics }}" wx:key="index">
        <swiper-item @tap="previewImagefunc({{ item.pics_big }})">
          <image class="swiper-img" src="{{ item.pics_big }}" />
        </swiper-item>
      </block>
  </swiper>
  
  <!-- 标题与价格等等 -->
  <view class="product-info">
    <view class="product-head">
        <text class="price">￥{{ goodsDetail.goods_price }}</text>
    </view>
    <view class="product-body">
      <view class="product-name">
        {{ goodsDetail.goods_name }}
      </view>
      <view class="product-like">
        <view class="iconfont icon-shoucang"></view>
        <view>收藏</view>
      </view>
    </view>
    <view class="product-foot">
        快递：<text>免运费</text>
    </view>
  </view>

  <!-- 商品活动 -->
  <view class="part">
    <view class="part-item part-line">
        <text class="note">促销</text><text class="description color-main">满300减30元</text>
    </view>
    <view class="part-item">
        <text class="note">已选</text><text class="description">黑色/S/1件</text>
    </view>
  </view>
  <view class="part">
    <view class="part-item">
      <text class="note">送至</text><text class="description">安徽省合肥市蜀山区华府骏苑</text>
      <view class="iconfont icon-jiantouyou"></view>
    </view>
  </view>

  <!-- 规格详情以及规格参数 -->
  <view class="tabs">
    <view class="tabs-head">

      <block wx:for="{{ tabList }}" wx:key="index">
        <view class="tabs-item {{ activeTab == index ? 'active' : '' }}" @tap="switchTabFunc({{ index }})">{{ item }}</view>
      </block>
      <!-- <view class="tabs-item {{ activeTab == 1 ? 'active' : '' }}" @tap="switchTabFunc({{ 1 }})">规格参数</view> -->
    </view>
    <view class="tabs-body">
      <view class="tabs-content" hidden="{{ activeTab != 0 }}">
        <!-- 引入模板 -->
        <import src="/plugins/wxParse/wxParse.wxml"/>
        <!-- 这里data中article为bindName -->
        <template is="wxParse" data="{{wxParseData:article.nodes}}"/>
      </view>
      <view class="tabs-content" hidden="{{ activeTab != 1 }}">
        <block wx:for="{{ goodsDetail.attrs }}" wx:key="index">
          <view class="param-item">
            <text class="note">{{ item.attr_name }}：</text>
            <text class="description">{{ item.attr_value }}</text>
          </view>
        </block>
      </view>
    </view>
  </view>

  <!-- 模拟底部导航栏 -->
  <view class="fixed-bar">
    <view class="item">
      <button open-type="contact" class="contact-btn">客服按钮</button>
      <view class="iconfont icon-kefu"></view>
      <text class="item-note">联系客服</text>
    </view>
    <view class="item" @tap="toCartTabBar">
      <view class="iconfont icon-gouwuche"></view>
      <text class="item-note">购物车</text>
    </view>
    <view class="btn-group">
      <view class="btn yellow-button" @tap="addCartFunc">加入购物车</view>
      <view class="btn red-button">立即购买</view>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy';
// 导入 api 文件
import { getGoodsDetail } from '../api/api';

//在使用的View中引入WxParse模块
var WxParse = require('../plugins/wxParse/wxParse.js');

export default class GoodsDetail extends wepy.page {
  config = {
    navigationBarTitleText: '商品详情'
  };

  data = {
    goodsDetail: null, // 商品详情页数据
    activeTab: 0, // 激活 tab
    tabList: ['图文详情', '规格参数']
  };

  methods = {
    // 预览图片
    previewImagefunc(currentImg) {
      // 定义一个数据，接收轮播图数据
      let previewImageArr = [];

      // 对数据遍历，拼接数据
      this.goodsDetail.pics.forEach((item, index) => {
        previewImageArr.push(item.pics_big);
      });

      // 预览图片
      wepy.previewImage({
        current: currentImg,
        urls: previewImageArr
      });
    },

    // tab 切换
    switchTabFunc(val) {
      console.log(val);
      this.activeTab = val;
    },

    // 跳转到购物车
    toCartTabBar() {
      wepy.switchTab({ url: '/pages/cart' });
    },

    // 加入购物车
    addCartFunc() {
      // 需要保存的数据
      let keys = ['goods_id', 'goods_name', 'goods_price', 'goods_small_logo'];
      // 遍历后拼接成一个对象，用来保存拼接后的数据
      let goodsCartInfo = {};

      keys.forEach((item, index) => {
        goodsCartInfo[item] = this.goodsDetail[item];
      });

      let cartDataArr = []

      cartDataArr.push(goodsCartInfo)
     

      let getCartDataArr = wepy.getStorageSync('cartDataArr') || [];

      // 分析：当多次添加商品的时测处理
      // 1. 本地没有存储数据时，将数据存储到本地
      // 2. 本地存在商品数据时，将购买的数量增加
      let goodsCartIndex = this._goodsCheckoutCartGoodsId(goodsCartInfo.goods_id, getCartDataArr);
      // console.log(goodsCartIndex)

      // 没有该商品，则添加到本地存储
      // 如果已经存在，购买商品的数量则添加 1
      // selectStatus == 选中的状态
      goodsCartInfo.selectStatus = true;

      if (goodsCartIndex === -1) {
        // 不存在，初始化数量 为 1
        goodsCartInfo.goods_number = 1
        getCartDataArr.push(goodsCartInfo)
      } else {
        // 存在该商品 累加
        getCartDataArr[goodsCartIndex].goods_number++
      }

      // 将当前的商品保存到本地
      wepy.setStorageSync('cartDataArr', getCartDataArr);

      // 添加成功后提示
      wepy.showToast({
        title: '添加成功',   //提示的内容,
        icon: 'success',    //图标,
        duration: 1500,     //延迟时间,
        mask: true,         //显示透明蒙层，防止触摸穿透
      });
      
    },

    wxParseImgLoad() {}
  };

  _goodsCheckoutCartGoodsId(goodsId, cartDataArr) {
    // console.log('test', goodsId, cartDataArr);

    // 校验当前的商品是否存在于 cartDataArr 中
    // 如果是 -1 说明不存在，否则就存在
    let goodsCartIndex = -1;

    // 遍历当前购物车的数据，然后判断是否存在某个 goodsid
    for( let i = 0; i < cartDataArr.length; i++ ) {
      if (cartDataArr[i].goods_id === goodsId) {
        goodsCartIndex = i
        break
      }
    }

    return goodsCartIndex;
  }

  onLoad(options) {
    // 获取商品详情页数据
    getGoodsDetail({ data: { goods_id: options.goods_id } }).then(res => {
      this.goodsDetail = res.data;
      this.$apply();

      let article = this.goodsDetail.goods_introduce;

      var that = this;
      WxParse.wxParse('article', 'html', article, that, 5);
    });
  }
}
</script>
